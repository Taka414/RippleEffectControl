<!-- システムに共通するスタイルをここに定義します -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CommonControls">

    <!-- ボタンをフラットデザイン化するためのスタイル -->
    <Style x:Key="FlatButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#CDD2D4"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ボタンをマテリアルデザイン化するためのスタイル -->
    <Style x:Key="MaterialButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="3" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#CDD2D4"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 親要素がボタンの時にMouseOverしたら下線を引くためのスタイル-->
    <Style x:Key="UnderLine_In_Button" TargetType="TextBlock">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="true">
                <Setter Property="TextDecorations" Value="Underline"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ListViewの標準のテーマを無効にするためのスタイル定義 -->
    <Style x:Key="DisableTheme" TargetType="ListBoxItem">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsSelected" Value="False"/>
    </Style>

    <!-- ListViewItemの選択状態を非表示にするスタイル -->
    <Style x:Key="HideSelection" TargetType="ListViewItem">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsSelected" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- Rippleボタンのスタイル -->
    <Style TargetType="{x:Type local:RippleButton}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RippleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="RippleAnimation"   Storyboard.TargetName="CircleEffect">
                            <!-- 初期化 -->
                            <DoubleAnimation Storyboard.TargetProperty="Width" To="0" Duration="0:0:0"/>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0"  To=".5"/>
                            <!-- クリックした位置の指定 -->
                            <ThicknessAnimation Storyboard.TargetProperty="Margin" Duration="0:0:0.8" FillBehavior="HoldEnd"/>
                            <!-- だんだん大きくなっていくアニメーション -->
                            <DoubleAnimation Storyboard.TargetProperty="Width" BeginTime="0:0:0" Duration="0:0:0.8" From="0" />
                            <DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:0.6" Storyboard.TargetProperty="Opacity" From=".5" To="0" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    
                    <Grid ClipToBounds="True">

                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter />
                        </Border>
                        <!-- ボタンを押した時に広がる波紋を表す円 -->
                        <Ellipse x:Name="CircleEffect"
                                             HorizontalAlignment="Left"
                                             VerticalAlignment="Top"
                                             Opacity="0.5"
                                             Width="0"
                                             Panel.ZIndex="0"
                                             Height="{Binding Path=Width, RelativeSource={RelativeSource Self}}"
                                             Fill="{TemplateBinding RippleColor}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#CDD2D4"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>